import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import numpy as np
from datetime import datetime

st.set_page_config(layout="wide")

@st.cache_data
def load_and_prepare_data():
    raw_data = {
        '‡πÉ‡∏´‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡πá‡∏ô‡∏ä‡∏≠‡∏ö FA': ["‡πÄ‡∏≠‡πÄ‡∏ä‡∏µ‡∏¢ ‡πÄ‡∏ß‡∏•‡∏ó‡πå ‡∏ö‡∏•. ‡∏ö‡∏à‡∏Å.\n‡πÄ‡∏™‡∏°‡∏∑‡∏≠‡∏ô‡∏£‡∏≤‡∏¢‡πÉ‡∏´‡∏°‡πà", "‡πÅ‡∏≠‡∏î‡πÑ‡∏ß‡πÄ‡∏ã‡∏≠‡∏£‡∏µ‡πà ‡∏û‡∏•‡∏±‡∏™ ‡∏ö‡∏à‡∏Å.", "‡∏Ñ‡∏¥‡∏á‡∏™‡πå‡∏ü‡∏≠‡∏£‡πå‡∏î ‡∏ö‡∏•. ‡∏ö‡∏°‡∏à.\n‡πÄ‡∏™‡∏°‡∏∑‡∏≠‡∏ô‡∏£‡∏≤‡∏¢‡πÉ‡∏´‡∏°‡πà", "‡∏ü‡∏¥‡∏ô‡∏±‡∏ô‡πÄ‡∏ã‡∏µ‡∏¢ ‡πÑ‡∏ã‡∏£‡∏±‡∏™ ‡∏ö‡∏•. ‡∏ö‡∏°‡∏à.", "‡πÄ‡∏Ñ‡∏à‡∏µ‡πÑ‡∏≠ (‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢) ‡∏ö‡∏•. ‡∏ö‡∏°‡∏à.", "‡∏ó‡∏¥‡∏™‡πÇ‡∏Å‡πâ ‡∏ö‡∏•. ‡∏ö‡∏à‡∏Å.", "‡πÄ‡∏°‡∏¢‡πå‡πÅ‡∏ö‡∏á‡∏Å‡πå ‡∏ö‡∏•. ‡∏ö‡∏°‡∏à."],
        '‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ñ‡∏≥‡∏Ç‡∏≠': ['‡∏£‡∏≤‡∏¢‡πÉ‡∏´‡∏°‡πà', '‡∏ï‡πà‡∏≠‡∏≠‡∏≤‡∏¢‡∏∏', '‡∏£‡∏≤‡∏¢‡πÉ‡∏´‡∏°‡πà', '‡∏ï‡πà‡∏≠‡∏≠‡∏≤‡∏¢‡∏∏', '‡∏£‡∏≤‡∏¢‡πÉ‡∏´‡∏°‡πà', '‡∏ï‡πà‡∏≠‡∏≠‡∏≤‡∏¢‡∏∏', '‡∏ï‡πà‡∏≠‡∏≠‡∏≤‡∏¢‡∏∏'],
        '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏∑‡πà‡∏ô‡∏Ñ‡∏≥‡∏Ç‡∏≠': ['2024-05-28', '2024-05-15', '2024-06-15', '2024-06-25', '2024-07-01', '2024-05-10', '2024-06-03'],
        '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥': ['2024-06-02', '2024-05-20', '2024-06-20', '2024-06-30', pd.NaT, '2024-05-25', pd.NaT],
        '‡πÄ‡∏™‡∏ô‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å ‡∏ú‡∏ä.‡∏ú‡∏≠‡∏ù.': ['2024-06-12', '2024-05-30', pd.NaT, pd.NaT, pd.NaT, '2024-06-10', pd.NaT],
        '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï': [pd.NaT, '2024-06-10', pd.NaT, pd.NaT, pd.NaT, '2024-07-10', pd.NaT],
        '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà 1 ‡πÅ‡∏•‡∏∞ 2': ['‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏à‡πà‡∏≤‡∏¢', '‡∏à‡πà‡∏≤‡∏¢‡∏Ñ‡∏£‡∏ö‡πÅ‡∏•‡πâ‡∏ß', '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏à‡πà‡∏≤‡∏¢', '‡∏à‡πà‡∏≤‡∏¢‡∏Ñ‡∏£‡∏ö‡πÅ‡∏•‡πâ‡∏ß', '‡∏à‡πà‡∏≤‡∏¢‡∏Ñ‡∏£‡∏ö‡πÅ‡∏•‡πâ‡∏ß', '‡∏à‡πà‡∏≤‡∏¢‡∏Ñ‡∏£‡∏ö‡πÅ‡∏•‡πâ‡∏ß', '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏à‡πà‡∏≤‡∏¢'],
        '‡∏ß‡∏±‡∏ô‡∏Ñ‡∏£‡∏ö‡∏≠‡∏≤‡∏¢‡∏∏‡πÄ‡∏´‡πá‡∏ô‡∏ä‡∏≠‡∏ö': ['2026-05-09', '2025-04-19', '2026-06-01', '2025-07-15', '2026-06-19', '2025-05-01', '2026-04-30']
    }
    df = pd.DataFrame(raw_data)

    date_cols = ['‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏∑‡πà‡∏ô‡∏Ñ‡∏≥‡∏Ç‡∏≠', '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥', '‡πÄ‡∏™‡∏ô‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å ‡∏ú‡∏ä.‡∏ú‡∏≠‡∏ù.', '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï', '‡∏ß‡∏±‡∏ô‡∏Ñ‡∏£‡∏ö‡∏≠‡∏≤‡∏¢‡∏∏‡πÄ‡∏´‡πá‡∏ô‡∏ä‡∏≠‡∏ö']
    for col in date_cols:
        df[col] = pd.to_datetime(df[col], errors='coerce')

    df['CompanyName'] = df['‡πÉ‡∏´‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡πá‡∏ô‡∏ä‡∏≠‡∏ö FA'].str.split('\n').str[0]
    df['ApplicationTypeClean'] = np.where(df['‡πÉ‡∏´‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡πá‡∏ô‡∏ä‡∏≠‡∏ö FA'].str.contains('‡πÄ‡∏™‡∏°‡∏∑‡∏≠‡∏ô‡∏£‡∏≤‡∏¢‡πÉ‡∏´‡∏°‡πà'), '‡πÄ‡∏™‡∏°‡∏∑‡∏≠‡∏ô‡∏£‡∏≤‡∏¢‡πÉ‡∏´‡∏°‡πà', df['‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ñ‡∏≥‡∏Ç‡∏≠'])
    df['PaymentStatus'] = np.where(df['‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà 1 ‡πÅ‡∏•‡∏∞ 2'] == '‡∏à‡πà‡∏≤‡∏¢‡∏Ñ‡∏£‡∏ö‡πÅ‡∏•‡πâ‡∏ß', '‡∏à‡πà‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß', '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏à‡πà‡∏≤‡∏¢')

    today = pd.to_datetime('2025-06-16')

    completed_days = (df['‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï'] - df['‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏∑‡πà‡∏ô‡∏Ñ‡∏≥‡∏Ç‡∏≠']).dt.days
    pending_days = (today - df['‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏∑‡πà‡∏ô‡∏Ñ‡∏≥‡∏Ç‡∏≠']).dt.days
    df['ProcessingDays'] = np.where(df['‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï'].notna(), completed_days, pending_days)
    stage_name_map = {'‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï': '‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï', '‡πÄ‡∏™‡∏ô‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å ‡∏ú‡∏ä.‡∏ú‡∏≠‡∏ù.': '‡πÄ‡∏™‡∏ô‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ø', '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥': '‡∏ï‡∏£‡∏ß‡∏à‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥', '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏∑‡πà‡∏ô‡∏Ñ‡∏≥‡∏Ç‡∏≠': '‡∏¢‡∏∑‡πà‡∏ô‡∏Ñ‡∏≥‡∏Ç‡∏≠'}
    df['CurrentStage'] = 'N/A'
    for stage_col, stage_name in stage_name_map.items():
        df.loc[df[stage_col].notna(), 'CurrentStage'] = stage_name
    df['DaysRemaining'] = 45 - df['ProcessingDays']
    df['SLA_Status'] = pd.cut(df['ProcessingDays'], bins=[-np.inf, 30, 45, np.inf], labels=['On Track', 'At Risk', 'Overdue'])
    df['UrgencyStatus'] = pd.cut(df['DaysRemaining'], bins=[-np.inf, -1, 10, 25, np.inf], labels=['Overdue', '‡πÄ‡∏£‡πà‡∏á‡∏î‡πà‡∏ß‡∏ô', '‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏´‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ô‡πÉ‡∏à', '‡∏ï‡∏≤‡∏°‡πÅ‡∏ú‡∏ô'])
    df['RenewalYear'] = df['‡∏ß‡∏±‡∏ô‡∏Ñ‡∏£‡∏ö‡∏≠‡∏≤‡∏¢‡∏∏‡πÄ‡∏´‡πá‡∏ô‡∏ä‡∏≠‡∏ö'].dt.year

    df['Days_Submit_To_Check'] = (df['‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥'] - df['‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏∑‡πà‡∏ô‡∏Ñ‡∏≥‡∏Ç‡∏≠']).dt.days
    df['Days_Check_To_Propose'] = (df['‡πÄ‡∏™‡∏ô‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å ‡∏ú‡∏ä.‡∏ú‡∏≠‡∏ù.'] - df['‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥']).dt.days
    df['Days_Propose_To_Approve'] = (df['‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï'] - df['‡πÄ‡∏™‡∏ô‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å ‡∏ú‡∏ä.‡∏ú‡∏≠‡∏ù.']).dt.days
    
    return df

df = load_and_prepare_data()

st.sidebar.header("‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (Filters)")
app_type_options = ["‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (All)"] + df['ApplicationTypeClean'].unique().tolist()
app_types_selected = st.sidebar.multiselect("‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ñ‡∏≥‡∏Ç‡∏≠:", options=app_type_options, default="‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (All)")
payment_status_options = ["‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (All)"] + df['PaymentStatus'].unique().tolist()
payment_statuses_selected = st.sidebar.multiselect("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô:", options=payment_status_options, default="‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (All)")
company_search = st.sidebar.text_input("‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó:")

conditions = []
if "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (All)" not in app_types_selected and app_types_selected:
    conditions.append(df['ApplicationTypeClean'].isin(app_types_selected))
if "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (All)" not in payment_statuses_selected and payment_statuses_selected:
    conditions.append(df['PaymentStatus'].isin(payment_statuses_selected))
if company_search:
    conditions.append(df['CompanyName'].str.contains(company_search, case=False))
df_filtered = df[np.all(conditions, axis=0)] if conditions else df

st.title("üìä FA Application & Renewal Tracking Dashboard")
st.markdown(f"**‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏ì ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: 16 ‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô 2568**")
st.markdown("---")
st.header("‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡∏ä‡∏µ‡πâ‡∏ß‡∏±‡∏î‡∏´‡∏•‡∏±‡∏Å (KPIs)")
kpi1, kpi2, kpi3, kpi4 = st.columns(4)
pending_apps = (df_filtered['CurrentStage'] != '‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï').sum()
at_risk_apps = (df_filtered['SLA_Status'] == 'At Risk').sum()
overdue_apps = (df_filtered['SLA_Status'] == 'Overdue').sum()
renewals_2025 = (df['RenewalYear'] == 2025).sum()
kpi1.metric(label="‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£ (Pending)", value=f"{pending_apps} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£") # ‡∏ï‡∏≠‡∏ö: ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Å‡∏µ‡πà ‡∏ö.
kpi2.metric(label="‡πÉ‡∏Å‡∏•‡πâ‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î SLA (At Risk)", value=f"{at_risk_apps} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
kpi3.metric(label="‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î SLA (Overdue)", value=f"{overdue_apps} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£", delta="‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏£‡πà‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£", delta_color="inverse")
kpi4.metric(label="‡∏£‡∏≠‡∏ï‡πà‡∏≠‡∏≠‡∏≤‡∏¢‡∏∏‡∏õ‡∏µ 2568 (‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î)", value=f"{renewals_2025} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£") # ‡∏ï‡∏≠‡∏ö: Req. 2

st.markdown("---")
st.header("‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å (Visualizations)")
st.subheader("1. ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£ (‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏õ)")
pending_df = df_filtered.query("CurrentStage != '‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï'").sort_values('ProcessingDays', ascending=False)
if not pending_df.empty:
    fig_sla = px.bar(pending_df, x='ProcessingDays', y='CompanyName', color='SLA_Status', orientation='h',
                     title='‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô',
                     labels={'ProcessingDays': '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÑ‡∏õ', 'CompanyName': '‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó'},
                     color_discrete_map={'On Track': '#2ca02c', 'At Risk': '#ff7f0e', 'Overdue': '#d62728'},
                     text='ProcessingDays')
    fig_sla.update_layout(yaxis={'categoryorder':'total ascending'})
    fig_sla.add_vline(x=45, line_width=2, line_dash="dash", line_color="red", annotation_text="SLA 45 ‡∏ß‡∏±‡∏ô")
    st.plotly_chart(fig_sla, use_container_width=True)
else:
    st.info("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å")

st.subheader("2. Countdown: ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Å‡πà‡∏≠‡∏ô‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î SLA")
st.markdown("‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î 45 ‡∏ß‡∏±‡∏ô ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πà‡∏á‡∏î‡πà‡∏ß‡∏ô")
df_countdown = df_filtered.query("CurrentStage != '‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï' and DaysRemaining >= 0").sort_values('DaysRemaining', ascending=True)
if not df_countdown.empty:
    fig_countdown = px.bar(df_countdown, x='DaysRemaining', y='CompanyName', color='UrgencyStatus', orientation='h',
                           title='‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏Å‡πà‡∏≠‡∏ô‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î 45 ‡∏ß‡∏±‡∏ô',
                           labels={'DaysRemaining': '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠', 'CompanyName': '‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó', 'UrgencyStatus': '‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πà‡∏á‡∏î‡πà‡∏ß‡∏ô'},
                           color_discrete_map={'‡∏ï‡∏≤‡∏°‡πÅ‡∏ú‡∏ô': '#2ca02c', '‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏´‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ô‡πÉ‡∏à': '#ff7f0e', '‡πÄ‡∏£‡πà‡∏á‡∏î‡πà‡∏ß‡∏ô': '#d62728'},
                           text='DaysRemaining')
    fig_countdown.update_layout(yaxis={'categoryorder':'total ascending'})
    st.plotly_chart(fig_countdown, use_container_width=True)
else:
    st.info("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Countdown (‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î SLA ‡πÑ‡∏õ‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß)")

st.subheader("3. ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏≠‡∏Ç‡∏ß‡∏î (Bottleneck) ‡∏Ç‡∏≠‡∏á‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£")
st.markdown("‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Ñ‡∏™‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡πÅ‡∏•‡πâ‡∏ß")
df_bottleneck = df_filtered.dropna(subset=['Days_Submit_To_Check', 'Days_Check_To_Propose', 'Days_Propose_To_Approve'])
df_bottleneck = df_bottleneck.sort_values('ProcessingDays', ascending=True)
if not df_bottleneck.empty:
    fig_bottleneck = go.Figure()
    fig_bottleneck.add_trace(go.Bar(y=df_bottleneck['CompanyName'], x=df_bottleneck['Days_Submit_To_Check'], name='‡∏¢‡∏∑‡πà‡∏ô -> ‡∏ï‡∏£‡∏ß‡∏à', orientation='h', marker_color='#1f77b4'))
    fig_bottleneck.add_trace(go.Bar(y=df_bottleneck['CompanyName'], x=df_bottleneck['Days_Check_To_Propose'], name='‡∏ï‡∏£‡∏ß‡∏à -> ‡πÄ‡∏™‡∏ô‡∏≠', orientation='h', marker_color='#ff7f0e'))
    fig_bottleneck.add_trace(go.Bar(y=df_bottleneck['CompanyName'], x=df_bottleneck['Days_Propose_To_Approve'], name='‡πÄ‡∏™‡∏ô‡∏≠ -> ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥', orientation='h', marker_color='#2ca02c'))
    fig_bottleneck.update_layout(barmode='stack', title_text='‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô (‡∏ß‡∏±‡∏ô)', xaxis_title="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ß‡∏±‡∏ô", yaxis_title="‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó", yaxis={'categoryorder':'total ascending'}, legend_title="‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô")
    st.plotly_chart(fig_bottleneck, use_container_width=True)
else:
    st.info("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå Bottleneck ‡∏ï‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å")

col1, col2 = st.columns(2)
with col1:
    st.subheader("4. ‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡πà‡∏≠‡∏≠‡∏≤‡∏¢‡∏∏‡∏õ‡∏µ 2568")
    renew_df_2025 = df.query("RenewalYear == 2025")[['CompanyName', '‡∏ß‡∏±‡∏ô‡∏Ñ‡∏£‡∏ö‡∏≠‡∏≤‡∏¢‡∏∏‡πÄ‡∏´‡πá‡∏ô‡∏ä‡∏≠‡∏ö']].sort_values('‡∏ß‡∏±‡∏ô‡∏Ñ‡∏£‡∏ö‡∏≠‡∏≤‡∏¢‡∏∏‡πÄ‡∏´‡πá‡∏ô‡∏ä‡∏≠‡∏ö')
    renew_df_2025['‡∏ß‡∏±‡∏ô‡∏Ñ‡∏£‡∏ö‡∏≠‡∏≤‡∏¢‡∏∏‡πÄ‡∏´‡πá‡∏ô‡∏ä‡∏≠‡∏ö'] = renew_df_2025['‡∏ß‡∏±‡∏ô‡∏Ñ‡∏£‡∏ö‡∏≠‡∏≤‡∏¢‡∏∏‡πÄ‡∏´‡πá‡∏ô‡∏ä‡∏≠‡∏ö'].dt.strftime('%d-%b-%Y')
    st.dataframe(renew_df_2025, use_container_width=True)
with col2:
    st.subheader("5. ‡∏™‡∏£‡∏∏‡∏õ‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô")
    if not df_filtered.empty:
        count_df = df_filtered.groupby(['ApplicationTypeClean', 'PaymentStatus'], as_index=False).size()
        fig_app_type = px.bar(count_df, x='ApplicationTypeClean', y='size', color='PaymentStatus', title='‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÅ‡∏ö‡πà‡∏á‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô', labels={'ApplicationTypeClean': '‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ñ‡∏≥‡∏Ç‡∏≠', 'size': '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó', 'PaymentStatus': '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô'}, barmode='stack', text_auto=True)
        st.plotly_chart(fig_app_type, use_container_width=True)
    else:
        st.info("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å")

st.markdown("---")
st.header("‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î (Detailed View)")
display_cols = ['CompanyName', 'ApplicationTypeClean', '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏∑‡πà‡∏ô‡∏Ñ‡∏≥‡∏Ç‡∏≠', 'CurrentStage', 'ProcessingDays', 'DaysRemaining', 'SLA_Status', 'PaymentStatus', '‡∏ß‡∏±‡∏ô‡∏Ñ‡∏£‡∏ö‡∏≠‡∏≤‡∏¢‡∏∏‡πÄ‡∏´‡πá‡∏ô‡∏ä‡∏≠‡∏ö', 'Days_Submit_To_Check', 'Days_Check_To_Propose', 'Days_Propose_To_Approve']
st.dataframe(df_filtered[display_cols], use_container_width=True)